Find the element that appears once in a sorted array

solution:

All elements before the required have the first occurrence at even index (0, 2, ..) and next occurrence at odd index (1, 3, …). And all elements after the required elements have the first occurrence at odd index and next occurrence at even index.

1) Find the middle index, say ‘mid’.




2) If ‘mid’ is even, then compare arr[mid] and arr[mid + 1]. If both are the same, then the required element after ‘mid’ else before mid.

3) If ‘mid’ is odd, then compare arr[mid] and arr[mid – 1]. If both are the same, then the required element after ‘mid’ else before mid.


solution

void search(a,n){
   

    if (low > high) 
        return; 
  
    if (low == high) 
    { 
        cout << "The required element is " 
             << arr[low]; 
        return; 
    } 
  
  
    int mid = (low + high) / 2; 
  
   
    if (mid % 2 == 0) 
    { 
        if (arr[mid] == arr[mid + 1]) 
            search(arr, mid + 2, high); 
        else
            search(arr, low, mid); 
    } 
    else 
    { 
        if (arr[mid] == arr[mid - 1]) 
            search(arr, mid + 1, high); 
        else
            search(arr, low, mid - 1); 
    } 


}
